<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search - Valor Intelligence</title>

    <!-- External Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">

    <!-- Security and integrity scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js" integrity="sha512-E8QSvWZ0eCLGk4km3hxSsNmGWbLtSCSUcewDQPQWZF6pEU8GlT8a5fF32wOl1i8ftdMhssTrF/OhyGWwonTcXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/bcryptjs@2.4.3/dist/bcrypt.min.js"></script>

    <!-- SEO and Open Graph Meta Tags -->
    <meta name="description" content="Search our database of publicly acquired information. All information is in the public domain and has been compiled into one search engine.">
    <meta name="robots" content="index, follow">
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Valor Intelligence LTD" />
    <meta property="og:description" content="Search our database of publicaly acquired information. All information is in the public domain and has been compiled into one search engine." />
    <meta property="og:url" content="https://search.valorintel.com" />
    <meta property="og:site_name" content="Database Search" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="en" />

    <link rel="stylesheet" href="styles.css">
</head>


<body>
    <div id="app">
        <v-app>
            <v-main>
                <v-container class="py-5">
                    <v-row>
                        <v-col cols="12">
                            <h1 class="text-center">Records Search</h1>
                            <h2 class="text-center">{{ count }} Records in DB</h2>
                            <h3 class="text-center">
                                <a href="/map" target="_blank">Try the Map</a> |
                                <a href="/faq">FAQ</a> |
                                <a href="/exports">Exports</a>
                            </h3>
                            <h3 class="text-center">
                                {{#isLoggedIn}}
                                    <form action="/logout" method="post" style="display: inline;">
                                        <button type="submit" class="v-btn v-btn--contained theme--light v-size--default red">
                                            Logout
                                        </button>
                                    </form>
                                {{/isLoggedIn}}
                                {{^isLoggedIn}}
                                    <a href="/login" class="v-btn v-btn--contained theme--light v-size--default blue">
                                        Login
                                    </a>
                                {{/isLoggedIn}}
                            </h3>
                        </v-col>
                    </v-row>

                    <v-card elevation="2" class="pa-4" color="#1e1e1e">
                        <v-row v-for="(query, idx) in queries" :key="idx" align="center" class="my-3">
                            <v-col cols="1">
                                <v-btn
                                        icon
                                        @click="idx === 0 ? addQuery() : queries.splice(idx, 1)"
                                        color="red lighten-1"
                                        class="white--text">
                                    <v-icon>{{ idx === 0 ? 'mdi-plus' : 'mdi-minus' }}</v-icon>
                                </v-btn>
                            </v-col>
                            <v-col cols="2">
                                <v-select
                                        v-model="query.field"
                                        :items="queryOptions"
                                        label="Field"
                                        dense
                                        solo
                                        class="white--text"
                                        hide-details
                                ></v-select>
                            </v-col>
                            <v-col cols="1" v-if="!isMobile()">
                                <v-checkbox
                                        v-model="query.not"
                                        label="Is Not"
                                        color="red"
                                ></v-checkbox>
                            </v-col>
                            <v-col cols="6" v-if="query.field !== 'Password'">
                                <v-text-field
                                        v-model="query.value"
                                        label="Value"
                                        solo-inverted
                                        hide-details
                                ></v-text-field>
                            </v-col>
                            <v-col cols="4" v-if="query.field === 'Password'">
                                <v-text-field
                                        v-model="query.value"
                                        label="Password"
                                        solo-inverted
                                        hide-details
                                ></v-text-field>
                            </v-col>
                            <v-col cols="2" v-if="query.field === 'Password'">
                                <v-checkbox
                                        v-model="query.extendedSearch"
                                        label="Extended Search"
                                        color="green"
                                ></v-checkbox>
                            </v-col>
                            <v-col cols="2" v-if="idx === 0">
                                <v-btn
                                        @click="buildAndSendQuery"
                                        color="blue darken-2"
                                        block
                                        class="white--text">
                                    <v-icon left>mdi-magnify</v-icon>Search
                                </v-btn>
                            </v-col>
                        </v-row>
                    </v-card>
                </v-container>
            </v-main>
        </v-app>
    </div>


<script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
    <script>
        const creditCountElement = document.getElementById("creditCount")
        new Vue({
            el: '#app',
            vuetify: new Vuetify({
                theme: { dark: true },
                // Mdi icons
                icons: {
                    iconfont: 'mdi',
                },
            }),
            data: () => ({
                queries: [
                    { field: 'First Name', value: '' },
                ],
                showWallet: false,
                balance: 0,
                exact: false,
                creditStr: '<loading>',
                walletFill: 0.0,
                walletId: '',
                hashTypes: ['BCrypt', 'MD5', 'SHA1', 'SHA256', 'SHA512', 'RIPEMD160', 'SHA3', 'SHA224', 'SHA384'],
                queryOptions: [
                    'First Name',
                    'Last Name',
                    'Email',
                    'Username',
                    'Password',
                    'Domain',
                    'IP Address',
                    'ASN Number',
                    'ASN Name',
                    'Continent',
                    'Country',
                    'Phone',
                    'Address',
                    'License Plate Number',
                    'Birth Year',
                    'VIN',
                    'City',
                    'State',
                    'Zip',
                    'Source', // Stuff I added is past here
                    'SSN',
                    'License Number',
                    'Debit',
                    'Debit Expiration',
                    'Debit Pin',
                    'Credit',
                    'Credit Expiration',
                    'Credit Pin',
                    'Passport Number',
                    'Military ID',
                    'Bank Account Numbers',
                    'Schools Attended',
                    'Certifications',
                    'Political Affiliation'
                ],
                queryFieldMap: {
                    'First Name': 'firstName',
                    'Last Name': 'lastName',
                    'Email': 'emails',
                    'Username': 'usernames',
                    'Password': 'passwords',
                    'Domain': 'domain',
                    'IP Address': 'ips',
                    'ASN Number': 'asn',
                    'ASN Name': 'asnOrg',
                    'Continent': 'continent',
                    'Country': 'country',
                    'Phone': 'phoneNumbers',
                    'Address': 'address',
                    'License Plate Number': 'VRN',
                    'Birth Year': 'birthYear',
                    'VIN': 'vin',
                    'City': 'city',
                    'State': 'state',
                    'Zip': 'zipCode',
                    'Source': 'source', // Everything I added is after this
                    'SSN' : 'ssn',
                    'License Number' : 'licenseNumber',
                    'Debit' : 'debitNumber',
                    'Debit Expiration' : 'debitExpiration',
                    'Debit Pin' : 'debitPin',
                    'Credit' : 'creditNumber',
                    'Credit Expiration' : 'creditExpiration',
                    'Credit Pin' : 'creditPin',
                    'Passport Number' : 'passportNumber',
                    'Military ID' : 'militaryID',
                    'Bank Account Numbers' : 'bankAccountNumbers',
                    'Schools Attended' : 'schoolsAttended',
                    'Certifications' : 'certifications',
                    'Political Affiliation' : 'politicalAffiliation'
                }
            }),
            mounted() {
                // Check if wallet is in local storage
                if (localStorage.getItem('walletId')) {
                    console.log('wallet found')
                    this.walletId = localStorage.getItem('walletId')
                    // Get balance
                    fetch(`/wallet/${this.walletId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log(`wallet balance: ${data.credits}`)
                            this.balance = data.credits
                            this.creditStr = data.credits.toString()
                        })
                } else {
                    // Create a new wallet ID (uuid)
                    this.walletId = this.uuidv4()
                    console.log('wallet created: '+this.walletId)
                    localStorage.setItem('walletId', this.walletId)
                    this.balance = 0
                    this.creditStr = '0.0'

                    // Get balance
                    fetch(`/wallet/${this.walletId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log(`wallet balance: ${data.credits}`)
                            this.balance = data.credits
                            this.creditStr = data.credits.toString()
                        })
                        
                }
            },
            methods: {
                updateWalletID(id) {
                    if (typeof id === 'string') {
                        this.walletId = id
                        console.log('wallet updated: '+id)
                        localStorage.setItem('walletId', id)
                    }
                },
                addQuery() {
                    // Limit 5 queries
                    if (this.queries.length >= 5) {
                        alert('Max 5 fields per query')
                    } else {
                        this.queries.push({ field: 'First Name', value: '' })
                    }
                },
                goToMap() {
                    window.location.href = `/map`
                },
                isMobile() {
                    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        return true
                    } else {
                        return false
                    }
                },
                uuidv4() {
                    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                doFillWallet() {
                    const walletId = this.walletId
                    // 1USD = 100 Credits
                    const amount = this.walletFill * 100

                    // Check if amount is valid
                    if (amount < 100) {
                        alert('Minimum $1')
                        return
                    }

                    // Check if wallet is valid
                    if (walletId.length !== 36) {
                        alert('Invalid wallet ID')
                        return
                    }

                    window.location = `/fillWallet/${walletId}/${amount}`
                },
                copyWalletId() {
                    // Method 1
                    const el = document.createElement('textarea');
                    el.value = this.walletId;
                    document.body.appendChild(el);
                    el.select();
                    document.execCommand('copy');
                    document.body.removeChild(el);

                    // Method 2
                    if (navigator.clipboard && navigator.clipboard.writeText) {
                        navigator.clipboard.writeText(this.walletId)
                    }
                    
                    // Method 3
                    const input = document.getElementById('walletId');
                    input.focus();
                    input.select();
                    document.execCommand('copy');                    
                },
                buildAndSendQuery() {
                    let query = ''
                    this.queries.forEach((q, idx) => {
                        const field = this.queryFieldMap[q.field];
                        const value = q.value;

                        if (q.not) {
                            if (idx === 0) {
                                query += `not${field}=${q.value}`;
                            } else {
                                query += `&not${field}=${q.value}`;
                            }
                        } else {
                            if (idx === 0) {
                                query += `${field}=${q.value}`;
                            } else {
                                query += `&${field}=${q.value}`;
                            }
                        }

                        

                        if (q.extendedSearch && field === "passwords") {
                            this.hashTypes.forEach((hashType) => {
                                if (hashType === 'BCrypt') {
                                    for (let i = 0; i <= 15; i++) {
                                        console.log(`Generating ${hashType} hash (rotation ${i}) for "${value}"...`)
                                        const hashValue = dcodeIO.bcrypt.hashSync(value, i);
                                        console.log(`${hashType} for "${value}" is "${hashValue}"`)
                                        query += `&passwords=${hashValue}`;
                                    }
                                } else {
                                    console.log(`Generating ${hashType} hash for ${value}...`)
                                    const hashValue = CryptoJS[hashType](value).toString();
                                    console.log(`${hashType} for ${value} is ${hashValue}`)
                                    query += `&passwords=${hashValue}`;
                                }
                            });
                        }

                        if (this.exact) {
                            query += `&exact=true`;
                        }
                    });


                    // Send query
                    window.location.href = `/records?${query}`
                }
            }
        })
    </script>
</body>

</html>
